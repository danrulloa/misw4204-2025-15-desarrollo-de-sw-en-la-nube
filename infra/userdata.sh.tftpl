#!/bin/bash
set -eux

ROLE="${role}"
REPO_URL="${repo_url}"
repo_branch="${repo_branch}"
COMPOSE_FILE="${compose_file}"

core_ip="${core_ip}"
db_ip="${db_ip}"
mq_ip="${mq_ip}"
obs_ip="${obs_ip}"
web_ip="${web_ip}"
worker_ip="${worker_ip}"

apt-get update -y
apt-get install -y ca-certificates curl gnupg lsb-release git
install -m 0755 -d /etc/apt/keyrings || true
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$VERSION_CODENAME") stable" \
> /etc/apt/sources.list.d/docker.list
apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
systemctl enable --now docker
usermod -aG docker ubuntu || true

mkdir -p /opt/anb-cloud
cd /opt/anb-cloud
if [ ! -d .git ]; then
  git clone "$REPO_URL" /opt/anb-cloud
fi
git fetch --all
git checkout "$repo_branch"
git reset --hard "origin/${repo_branch}"

# ----- .env por rol -----
cat > /opt/anb-cloud/.env <<EOF
APP_ENV=production
API_TAG=latest
LOKI_URL=http://${obs_ip}:3100/loki/api/v1/push

# CORE & AUTH DBs
POSTGRES_USER=anb_user
POSTGRES_PASSWORD=anb_pass
POSTGRES_CORE_DB=anb_core
POSTGRES_AUTH_DB=anb_auth

ACCESS_TOKEN_SECRET_KEY = mi_clave_de_acceso_secreta
REFRESH_TOKEN_SECRET_KEY = mi_clave_de_refresh_secreta
TOKEN_EXPIRE = 15
REFRESH_TOKEN_EXPIRE = 60
DB_URL_CORE=postgresql+asyncpg://anb_user:anb_pass@${db_ip}:5432/anb_core
DB_URL_AUTH=postgresql+asyncpg://anb_user:anb_pass@${db_ip}:5433/anb_auth

# MQ
RABBITMQ_DEFAULT_USER=rabbit
RABBITMQ_DEFAULT_PASS=rabbitpass
RABBITMQ_URL=amqp://rabbit:rabbitpass@${mq_ip}:5672//
RABBITMQ_HOST=${mq_ip}

# WEB upstreams
UPSTREAM_API=http://${core_ip}:8000
UPSTREAM_AUTH=http://${core_ip}:8001

# JWT & Security
JWT_SECRET=mi_secreto_super_seguro_para_jwt_tokens_2024
ALGORITHM=HS256
EOF

# Configurar prometheus con IPs dinámicas solo en OBS
if [ "$ROLE" = "obs" ]; then
  # Usar el archivo base y sustituir placeholders con IPs reales
  sed -i "s/__WEB_IP__/${web_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
  sed -i "s/__CORE_IP__/${core_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
  sed -i "s/__DB_IP__/${db_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
  sed -i "s/__MQ_IP__/${mq_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
  sed -i "s/__WORKER_IP__/${worker_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
  sed -i "s/__OBS_IP__/${obs_ip}/g" /opt/anb-cloud/observability/prometheus/prometheus.yml
fi

# Configurar nginx con IPs dinámicas solo en WEB
if [ "$ROLE" = "web" ]; then
  # Generar nginx.conf con las IPs correctas
  sed -i "s/__CORE_IP__/${core_ip}/g" /opt/anb-cloud/nginx/nginx.conf
  sed -i "s/__MQ_IP__/${mq_ip}/g" /opt/anb-cloud/nginx/nginx.conf  
  sed -i "s/__OBS_IP__/${obs_ip}/g" /opt/anb-cloud/nginx/nginx.conf
fi

# ----- Arranque por perfil -----
case "$ROLE" in
  web)    docker compose -f "$COMPOSE_FILE" --profile web    up -d ;;
  core)   docker compose -f "$COMPOSE_FILE" --profile core   up -d ;;
  db)     docker compose -f "$COMPOSE_FILE" --profile db     up -d ;;
  mq)     docker compose -f "$COMPOSE_FILE" --profile mq     up -d ;;
  worker) docker compose -f "$COMPOSE_FILE" --profile worker up -d ;;
  obs)    docker compose -f "$COMPOSE_FILE" --profile obs    up -d ;;
esac

