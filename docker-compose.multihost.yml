version: "3.9"
name: anb-cloud-multihost

x-ns: &ns ${DOCKERHUB_NAMESPACE:-ftaboadar}

services:
  # ================== WEB ==================
  nginx:
    profiles: ["web"]
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    ports:
      - "80:80"                        
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    tmpfs: [ /var/cache/nginx, /var/run, /var/tmp/nginx ]
    read_only: true
    security_opt: [ "no-new-privileges:true" ]
    restart: unless-stopped
    networks: [ internal ]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  nginx-exporter:
    profiles: ["web","obs-agent-web"]
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: nginx-exporter
    command: [ "-nginx.scrape-uri=http://nginx-proxy:80/nginx_status" ]
    ports:
      - "9113:9113"                      
    restart: unless-stopped
    networks: [ internal ]

  cadvisor:
    profiles: ["web","obs-agent"]
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    ports:
      - "8080:8080"                    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: [ internal ]

  promtail:
    profiles: ["web","obs-agent"]
    image: grafana/promtail:2.9.4
    container_name: promtail
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true          
    environment:
      - LOKI_URL=${LOKI_URL}         
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks: [ internal ]

  # ================== CORE ==================
  anb_api:
    profiles: ["core"]
    image: ftaboadar/anb-core:latest
    container_name: anb_api
    ports:
      - "8000:8000"                      
    env_file: [ .env ]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-rabbit}:${RABBITMQ_DEFAULT_PASS:-rabbitpass}@${RABBITMQ_HOST:-rabbitmq}:5672//
      - CELERY_RESULT_BACKEND=rpc://
      - DATABASE_URL=${DB_URL_CORE} 
      - JWT_SECRET=${JWT_SECRET:-changeme}
    volumes:
      - ./core/storage:/app/storage
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys,urllib.request; u='http://127.0.0.1:8000/health'; r=urllib.request.urlopen(u, timeout=3); sys.exit(0 if 200<=r.status<400 else 1)" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s
    networks: [ internal ]

  anb-auth-service:
    profiles: ["core"]
    image: ftaboadar/anb-auth:latest
    container_name: anb-auth-service
    ports:
      - "8001:8000"                    
    env_file: [ .env ]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - PORT=8000
      - DATABASE_URL=${DB_URL_AUTH}      
      - JWT_SECRET=${JWT_SECRET:-changeme}

    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys,urllib.request; u='http://127.0.0.1:8000/auth/api/v1/status'; r=urllib.request.urlopen(u, timeout=3); sys.exit(0 if 200<=r.status<400 else 1)" ]
      interval: 15s
      timeout: 5s
      start_period: 25s
      retries: 5
    networks: [ internal ]

  cadvisor-core:
    profiles: ["core","obs-agent"]
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-core
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: [ internal ]

  promtail-core:
    profiles: ["core","obs-agent"]
    image: grafana/promtail:2.9.4
    container_name: promtail-core
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    environment:
      - LOKI_URL=${LOKI_URL}
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks: [ internal ]

  # ================== DB ==================
  anb-auth-db:
    profiles: ["db"]
    image: postgres:15-alpine
    container_name: anb-auth-db
    env_file: [ .env ]
    environment:
      - POSTGRES_DB=${POSTGRES_DB_AUTH:-anb_auth}
      - POSTGRES_USER=${POSTGRES_USER:-anb_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-anb_pass}
      - TZ=America/Bogota
    ports:
      - "5433:5432"       
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-anb_user} -d ${POSTGRES_DB_AUTH:-anb_auth} -h 127.0.0.1 -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [ internal ]

  anb-core-db:
    profiles: ["db"]
    image: postgres:15-alpine
    container_name: anb-core-db
    env_file: [ .env ]
    environment:
      - POSTGRES_DB=${POSTGRES_DB_CORE:-anb_core}
      - POSTGRES_USER=${POSTGRES_USER:-anb_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-anb_pass}
      - TZ=America/Bogota
    ports:
      - "5432:5432"            
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-anb_user} -d ${POSTGRES_DB_CORE:-anb_core} -h 127.0.0.1 -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 25s
    restart: unless-stopped
    networks: [ internal ]

  pg-exporter-auth:
    profiles: ["db","obs-agent-db"]
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: pg-exporter-auth
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-anb_user}:${POSTGRES_PASSWORD:-anb_pass}@anb-auth-db:5432/${POSTGRES_DB_AUTH:-anb_auth}?sslmode=disable
    ports:
      - "9188:9187"
    restart: unless-stopped
    networks: [ internal ]

  pg-exporter-core:
    profiles: ["db","obs-agent-db"]
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: pg-exporter-core
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-anb_user}:${POSTGRES_PASSWORD:-anb_pass}@anb-core-db:5432/${POSTGRES_DB_CORE:-anb_core}?sslmode=disable
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks: [ internal ]

  cadvisor-db:
    profiles: ["db","obs-agent"]
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-db
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: [ internal ]

  promtail-db:
    profiles: ["db","obs-agent"]
    image: grafana/promtail:2.9.4
    container_name: promtail-db
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    environment:
      - LOKI_URL=${LOKI_URL}
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks: [ internal ]

  # ================== MQ ==================
  rabbitmq:
    profiles: ["mq"]
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-rabbit}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-rabbitpass}
    ports:
      - "5672:5672"                      
      - "15672:15672"                    
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 15s
      timeout: 15s
      retries: 5
    restart: unless-stopped
    networks: [ internal ]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  cadvisor-mq:
    profiles: ["mq","obs-agent"]
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-mq
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: [ internal ]

  promtail-mq:
    profiles: ["mq","obs-agent"]
    image: grafana/promtail:2.9.4
    container_name: promtail-mq
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    environment:
      - LOKI_URL=${LOKI_URL}
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks: [ internal ]

  # ================== WORKER ==================
  worker:
    profiles: ["worker"]
    image: ftaboadar/anb-worker:latest
    container_name: worker
    env_file: [ .env ]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-rabbit}:${RABBITMQ_DEFAULT_PASS:-rabbitpass}@${RABBITMQ_HOST:-rabbitmq}:5672//
      - CELERY_RESULT_BACKEND=rpc://
    command: celery -A celery_app worker --loglevel=INFO
    restart: unless-stopped
    networks: [ internal ]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  # ================== OBS ==================
  prometheus:
    profiles: ["obs"]
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command: [ "--web.enable-lifecycle", "--config.file=/etc/prometheus/prometheus.yml" ]
    ports:
      - "9090:9090"                  
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks: [ internal ]

  grafana:
    profiles: ["obs"]
    image: grafana/grafana:11.2.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"                     
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/grafana/provisioning/dashboard:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks: [ internal ]

  loki:
    profiles: ["obs"]
    image: grafana/loki:2.9.4
    container_name: loki
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100"                      
    volumes:
      - ./observability/loki/config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    restart: unless-stopped
    networks: [ internal ]

networks:
  internal:
    name: anb-internal

volumes:
  rabbitmq_data:
  postgres_auth_data:
  postgres_core_data:
  grafana_data:
  loki_data:
