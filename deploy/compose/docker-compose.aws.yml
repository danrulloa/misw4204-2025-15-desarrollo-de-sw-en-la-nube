name: anb-cloud

services:
  anb_api:
    image: ftaboadar/anb-core:${API_TAG:-latest}
    container_name: anb_api
    expose:
      - "8000"
    env_file: [ .env ]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-rabbit}:${RABBITMQ_DEFAULT_PASS:-rabbitpass}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    volumes:
      - ./core/storage:/app/storage
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys,urllib.request; u='http://127.0.0.1:8000/health'; r=urllib.request.urlopen(u, timeout=3); sys.exit(0 if 200<=r.status<400 else 1)" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s
    depends_on:
      anb-core-db:
        condition: service_healthy
      anb-auth-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M

  anb-auth-service:
    image: ftaboadar/anb-auth:${API_TAG:-latest}
    container_name: anb-auth-service
    expose:
      - "8000"
    env_file: [ .env ]
    environment:
      - ENV=${APP_ENV:-development}
      - PORT=8000
    volumes:
      - ./auth_service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys,urllib.request; u='http://127.0.0.1:8000/auth/api/v1/status'; r=urllib.request.urlopen(u, timeout=3); sys.exit(0 if 200<=r.status<400 else 1)" ]
      interval: 15s
      timeout: 5s
      start_period: 25s
      retries: 5
    depends_on:
      anb-auth-db:
        condition: service_healthy
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /var/tmp/nginx
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    depends_on:
      anb_api:
        condition: service_healthy
      anb-auth-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      grafana:
        condition: service_started
    networks:
      - internal
      - public
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '4.00'
          memory: 4G
        reservations:
          cpus: '0.10'
          memory: 128M

  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-rabbit}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-rabbitpass}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/etc/rabbitmq/definitions.json"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 15s
      timeout: 15s
      retries: 5
    networks:
      - internal
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  worker:
    image: ftaboadar/anb-worker:${API_TAG:-latest}
    env_file: [ .env ]
    container_name: worker
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-rabbit}:${RABBITMQ_DEFAULT_PASS:-rabbitpass}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
      - APP_ENV=${APP_ENV:-production}
    volumes:
      - ./worker:/app
      - ./core/storage:/app/storage
      - ./worker/assets:/app/assets:ro
    command: celery -A celery_app worker --loglevel=INFO
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      anb_api:
        condition: service_started
    networks:
      - internal
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M

  anb-auth-db:
    image: postgres:15-alpine
    container_name: anb-auth-db
    restart: unless-stopped
    env_file: [ .env ]
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-anb_auth}
      - POSTGRES_USER=${POSTGRES_USER:-anb_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-anb_pass}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TZ=America/Bogota
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-anb_user} -d ${POSTGRES_DB:-anb_auth} -h 127.0.0.1 -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
 
  anb-core-db:
    image: postgres:15-alpine
    container_name: anb-core-db
    restart: unless-stopped
    env_file: [ .env ]
    environment:
      - POSTGRES_DB=${POSTGRES_CORE_DB:-anb_core}
      - POSTGRES_USER=${POSTGRES_USER:-anb_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-anb_pass}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TZ=America/Bogota
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 25s
    networks:
      - internal
      - public
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.50'
          memory: 512M

#####################observavilidad 
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command: ["--web.enable-lifecycle", "--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - anb-auth-db
      - anb-core-db
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.50'
          memory: 512M

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    environment:
      - GF_SERVER_ROOT_URL=http://localhost:8080/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_ENFORCE_DOMAIN=false

      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/grafana/provisioning/dashboard:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: nginx-exporter
    command:
      - -nginx.scrape-uri=http://nginx-proxy:80/nginx_status
    restart: unless-stopped
    depends_on:
      - nginx
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  pg_exporter_auth:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: pg-exporter-auth
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-anb_user}:${POSTGRES_PASSWORD:-anb_pass}@anb-auth-db:5432/${POSTGRES_DB:-anb_auth}?sslmode=disable
    restart: unless-stopped
    depends_on:
      - anb-auth-db
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  pg_exporter_core:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: pg-exporter-core
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-anb_user}:${POSTGRES_PASSWORD:-anb_pass}@anb-core-db:5432/${POSTGRES_CORE_DB:-anb_core}?sslmode=disable
    restart: unless-stopped
    depends_on:
      - anb-core-db
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports: []
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
  loki:
    image: grafana/loki:2.9.4
    command: -config.file=/etc/loki/config.yml
    container_name: loki
    volumes:
      - ./observability/loki/config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    restart: unless-stopped
    networks: [internal]
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  promtail:
    image: grafana/promtail:2.9.4
    command: -config.file=/etc/promtail/config.yml
    container_name: promtail
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - loki
    restart: unless-stopped
    networks: [internal]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
networks:
  public:
    name: anb-public
  internal:
    name: anb-internal
    internal: true

volumes:
  rabbitmq_data:
  postgres_data:
  postgres_core_data:
  grafana_data:
  loki_data:
